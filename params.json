{
  "name": "Live Data Fed Attack Map",
  "tagline": "Live Data Fed Attack Map",
  "body": "![](https://raw.githubusercontent.com/joshftx/maps/master/screenshot.png)\r\n\r\nThis project is based on the pewpew attack map project: https://github.com/hrbrmstr/pewpew\r\n\r\nI liked it so much, but really wanted to see my own live data on there. I saw that they had added some custom support for MHN honeypot through some web sockets.  I decided to learn a little node.js and built a little node app hosts the web page and has a listener that listens on UDP 514 for any incoming messages, looks for IP addresses in the message, does a quick ip-geo lookup, and passes the coordinates to the web page, where your browser draws the arcs. The I figured you can configure anything you want to forward syslog messages to port 514.  Its still a little buggy, but works for the most part.\r\n\r\nFor this project, since all the destinations were at my datacenter, the destination is the same for every hit. You can adjust that at the top of geolistener.js.\r\nYou will also need to get a free API key from http://www.ipinfodb.com/. Make sure to throttle your source so you don't overload their servers and go over the free limit.  A goof future enhancement would be buffering of input requests and caching of results. Place this at the top of geolistener.js also.\r\n\r\nto get it started:\r\n\r\nnode geolistener.js\r\n\r\nThis will start a webserver on port 3000, which servers up the index.html located in public. It also starts the syslog listener on port 514. Make sure your firewall allows inbound UDP to 514, and if you have any local firewall running on your node server, you'll need to allow it to listen on 3000.\r\n\r\nYou can check mine out here: http://gamehenge.duckdns.org:3000\r\n\r\nThe required node modules are:\r\nd3, \r\nexpress, \r\nsocket.io, \r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}